#version 330 core

in vec3 vPos;
in vec3 vNormal;
in vec2 vTex;

out vec4 fColor;

/////////////////////////////

struct Material
{
	sampler2D tex_ambient0;

	sampler2D tex_diffuse0;
	sampler2D tex_diffuse1;

	sampler2D tex_specular0;

	float shininess;
};

struct DirLight
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	vec3 dir;
};

struct PointLight
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	vec3 pos;

	float constant;
	float linear;
	float quadratic;
};

struct SpotLight
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	vec3 pos;
	vec3 dir;

	float constant;
	float linear;
	float quadratic;

	float outAngle;
	float inAngle;
};

uniform Material fuMaterial;
uniform DirLight fuDLight;
uniform PointLight fuPLight0;
uniform SpotLight fuSLight0;

uniform vec3 fuViewPos;
uniform vec3 fuViewDir;

vec3 calcDirLight(DirLight, vec3);
vec3 calcPointLight(PointLight, vec3);
vec3 calcSpotLight(SpotLight, vec3);

/////////////////////////////

void main()
{	
	vec3 color = vec3(0.0);

	//data
	vec3 viewDir = normalize(fuViewPos - vPos);

	//directional light
	//-------------------------------------------
	//color += calcDirLight(fuDLight, fuViewDir);
	
	//point lights
	//-------------------------------------------
	//color += calcPointLight(fuPLight0, viewDir);

	//spotlights
	//-------------------------------------------

	color += calcSpotLight(fuSLight0, viewDir);
	
	//////////////////////////////////////////////
	fColor = vec4(color, 1.0);
}

vec3 calcDirLight(DirLight light, vec3 viewDir)
{
	vec3 ambient = light.ambient * vec3(texture(fuMaterial.tex_diffuse0, vTex));

	vec3 norm = normalize(vNormal);
	vec3 lightDir = normalize(light.dir);
	float diff = max(0.0, dot(-lightDir, norm));
	vec3 diffuse = light.diffuse * diff * vec3(texture(fuMaterial.tex_diffuse0, vTex));

	vec3 reflectDir = reflect(lightDir, norm);
	float spec = pow(max(0.0, dot(viewDir, reflectDir)), fuMaterial.shininess);
	vec3 specular = light.specular * spec * vec3(texture(fuMaterial.tex_specular0, vTex));
	
	return ambient + diffuse + specular;
}

vec3 calcPointLight(PointLight light, vec3 viewDir)
{
	vec3 lightDir = normalize(light.pos - vPos);
	vec3 norm = normalize(vNormal);

	vec3 ambient = light.ambient * vec3(texture(fuMaterial.tex_diffuse0, vTex));

	float diff = max(0.0, dot(norm, lightDir));
	vec3 diffuse = light.diffuse * diff * vec3(texture(fuMaterial.tex_diffuse0, vTex));

	//vec3 reflectDir = reflect(-lightDir, norm);
	vec3 halfDir = normalize(lightDir + viewDir);
	float spec = pow(max(0.0, dot(halfDir, norm)), fuMaterial.shininess);
	vec3 specular = light.specular * spec * vec3(texture(fuMaterial.tex_specular0, vTex));

	float d = length(light.pos - vPos);
	float attenuation = 1 / (light.constant + light.linear * d + light.quadratic * (d * d));
	
	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

	return ambient + diffuse + specular;
}

vec3 calcSpotLight(SpotLight light, vec3 viewDir)
{
	vec3 lightDir = normalize(light.pos - vPos);
	float theta = dot(normalize(-light.dir), lightDir);
	
	if(theta > light.outAngle)
	{
		vec3 norm = normalize(vNormal);

		vec3 ambient = light.ambient * vec3(texture(fuMaterial.tex_diffuse0, vTex));

		float diff = max(0.0, dot(norm, lightDir));
		vec3 diffuse = light.diffuse * diff * vec3(texture(fuMaterial.tex_diffuse0, vTex));

		vec3 reflectDir = reflect(-lightDir, norm);
		float spec = pow(max(0.0, dot(viewDir, reflectDir)), fuMaterial.shininess);
		vec3 specular = light.specular * spec * vec3(texture(fuMaterial.tex_specular0, vTex));

		float e = light.inAngle - light.outAngle;
		
		//float intensity = clamp((theta - light.outAngle) / e, 0.0, 1.0);
		//or
		float intensity = smoothstep(0.0, 1.0, (theta - light.outAngle) / e);

		diffuse *= intensity;
		specular *= intensity;

		float d = length(light.pos - vPos);
		float attenuation = 1 / (light.constant + light.linear * d + light.quadratic * (d * d));
	
		diffuse *= attenuation;
		specular *= attenuation;
		
		return ambient + diffuse + specular;
	}
	else
	{
		return light.ambient * vec3(texture(fuMaterial.tex_diffuse0, vTex));	
	}

}