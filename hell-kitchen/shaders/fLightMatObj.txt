#version 330 core

in vec3 vFragPos;
in vec3 vNormal;

out vec4 fColor;

struct Material{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

struct Light{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};


uniform Material material;
uniform Light light;

uniform vec3 fuViewPos;

void main(){
	//ambient
	vec3 ambient = light.ambient * material.ambient;
	
	//diffuse
	vec3 normal = normalize(vNormal);
	vec3 lightDir = normalize(light.position - vFragPos);
	float diff = max(dot(normal, lightDir), 0.0);	
	vec3 diffuse = light.diffuse * (diff * material.diffuse);

	//specular
	vec3 viewDir = normalize(fuViewPos - vFragPos);
	vec3 reflectDir = reflect(-lightDir, normal);		
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32 * material.shininess);
	vec3 specular = light.specular * (spec * material.specular);

	//out
	vec3 result = ambient + diffuse + specular;
	fColor = vec4(result, 1.0);
}


