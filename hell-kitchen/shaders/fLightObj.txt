#version 330 core

in vec3 vFragPos;
in vec3 vNormal;
in vec2 vTex;

out vec4 fColor;

struct Material{
	sampler2D diffuse;
	sampler2D specular;
	sampler2D emission;
	float shininess;
};

struct Light{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};


uniform Material material;
uniform Light light;

uniform vec3 fuViewPos;
uniform float fuTime;

void main(){
	//ambient
	vec3 ambient = light.ambient * texture(material.diffuse, vTex).rgb;
	
	//diffuse
	vec3 normal = normalize(vNormal);
	vec3 lightDir = normalize(light.position - vFragPos);
	float diff = max(dot(normal, lightDir), 0.0);	
	vec3 diffuse = light.diffuse * diff * texture(material.specular, vTex).rgb;

	//specular
	vec3 viewDir = normalize(fuViewPos - vFragPos);
	vec3 reflectDir = reflect(-lightDir, normal);		
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * spec * texture(material.specular, vTex).rgb;
	
	//emission
	
	vec3 emission = vec3(0.0);
	if(texture(material.specular, vTex).r == 0.0){
		//emission = texture(material.emission, vTex + vec2(0.0, fuTime)).rgb;
		emission = texture(material.emission, vTex).rgb;
		
		emission *= (sin(fuTime) * 0.4 + 0.6) * 2.0;
		emission.x = emission.y;
		emission.y -= emission.y;
		emission.z -= emission.z;
	}

	//out
	vec3 result = ambient + diffuse + specular + emission;
	fColor = vec4(result, 1.0);
}


